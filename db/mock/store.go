// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MadhavaAdiga/grpc-hrm-server/db (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/MadhavaAdiga/grpc-hrm-server/db"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockStore) CreateEmployee(arg0 context.Context, arg1 db.CreateEmployeeParam) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockStoreMockRecorder) CreateEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockStore)(nil).CreateEmployee), arg0, arg1)
}

// CreateOrganization mocks base method.
func (m *MockStore) CreateOrganization(arg0 context.Context, arg1 db.CreateOrganizationParam) (db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0, arg1)
	ret0, _ := ret[0].(db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockStoreMockRecorder) CreateOrganization(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockStore)(nil).CreateOrganization), arg0, arg1)
}

// CreatePayroll mocks base method.
func (m *MockStore) CreatePayroll(arg0 context.Context, arg1 db.CreatePayrollParam) (db.Payroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayroll", arg0, arg1)
	ret0, _ := ret[0].(db.Payroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayroll indicates an expected call of CreatePayroll.
func (mr *MockStoreMockRecorder) CreatePayroll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayroll", reflect.TypeOf((*MockStore)(nil).CreatePayroll), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockStore) CreateRole(arg0 context.Context, arg1 db.CreateRoleParam) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockStoreMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockStore)(nil).CreateRole), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParam) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// FindAdminEmployee mocks base method.
func (m *MockStore) FindAdminEmployee(arg0 context.Context, arg1 db.FindAdminEmployeeParam) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdminEmployee", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdminEmployee indicates an expected call of FindAdminEmployee.
func (mr *MockStoreMockRecorder) FindAdminEmployee(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdminEmployee", reflect.TypeOf((*MockStore)(nil).FindAdminEmployee), arg0, arg1)
}

// FindEmployeeByUnameAndOrg mocks base method.
func (m *MockStore) FindEmployeeByUnameAndOrg(arg0 context.Context, arg1 db.FindEmployeeUnameAndOrgParam) (db.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEmployeeByUnameAndOrg", arg0, arg1)
	ret0, _ := ret[0].(db.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEmployeeByUnameAndOrg indicates an expected call of FindEmployeeByUnameAndOrg.
func (mr *MockStoreMockRecorder) FindEmployeeByUnameAndOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEmployeeByUnameAndOrg", reflect.TypeOf((*MockStore)(nil).FindEmployeeByUnameAndOrg), arg0, arg1)
}

// FindOrganizationByID mocks base method.
func (m *MockStore) FindOrganizationByID(arg0 context.Context, arg1 uuid.UUID) (db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationByID", arg0, arg1)
	ret0, _ := ret[0].(db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrganizationByID indicates an expected call of FindOrganizationByID.
func (mr *MockStoreMockRecorder) FindOrganizationByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationByID", reflect.TypeOf((*MockStore)(nil).FindOrganizationByID), arg0, arg1)
}

// FindOrganizationByName mocks base method.
func (m *MockStore) FindOrganizationByName(arg0 context.Context, arg1 string) (db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrganizationByName", arg0, arg1)
	ret0, _ := ret[0].(db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrganizationByName indicates an expected call of FindOrganizationByName.
func (mr *MockStoreMockRecorder) FindOrganizationByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrganizationByName", reflect.TypeOf((*MockStore)(nil).FindOrganizationByName), arg0, arg1)
}

// FindPayrollByEmp mocks base method.
func (m *MockStore) FindPayrollByEmp(arg0 context.Context, arg1 uuid.UUID) (db.Payroll, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPayrollByEmp", arg0, arg1)
	ret0, _ := ret[0].(db.Payroll)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPayrollByEmp indicates an expected call of FindPayrollByEmp.
func (mr *MockStoreMockRecorder) FindPayrollByEmp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPayrollByEmp", reflect.TypeOf((*MockStore)(nil).FindPayrollByEmp), arg0, arg1)
}

// FindRoleByOrganizationID mocks base method.
func (m *MockStore) FindRoleByOrganizationID(arg0 context.Context, arg1 db.FindRoleByOrgIDParam) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoleByOrganizationID", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoleByOrganizationID indicates an expected call of FindRoleByOrganizationID.
func (mr *MockStoreMockRecorder) FindRoleByOrganizationID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoleByOrganizationID", reflect.TypeOf((*MockStore)(nil).FindRoleByOrganizationID), arg0, arg1)
}

// FindRoleByOrganizationName mocks base method.
func (m *MockStore) FindRoleByOrganizationName(arg0 context.Context, arg1 db.FindRoleByOrgNameParam) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoleByOrganizationName", arg0, arg1)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoleByOrganizationName indicates an expected call of FindRoleByOrganizationName.
func (mr *MockStoreMockRecorder) FindRoleByOrganizationName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoleByOrganizationName", reflect.TypeOf((*MockStore)(nil).FindRoleByOrganizationName), arg0, arg1)
}

// FindUserById mocks base method.
func (m *MockStore) FindUserById(arg0 context.Context, arg1 uuid.UUID) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockStoreMockRecorder) FindUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockStore)(nil).FindUserById), arg0, arg1)
}

// FindUserByName mocks base method.
func (m *MockStore) FindUserByName(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByName", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByName indicates an expected call of FindUserByName.
func (mr *MockStoreMockRecorder) FindUserByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByName", reflect.TypeOf((*MockStore)(nil).FindUserByName), arg0, arg1)
}
