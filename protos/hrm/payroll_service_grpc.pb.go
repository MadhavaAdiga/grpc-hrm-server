// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayrollServiceClient is the client API for PayrollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayrollServiceClient interface {
	// add payroll to and existing employee
	AddPayroll(ctx context.Context, in *AddPayrollRequest, opts ...grpc.CallOption) (*PayrollResponse, error)
	// update payroll of an existing employee
	UpdatePayroll(ctx context.Context, in *UpdatePayrollRequest, opts ...grpc.CallOption) (*PayrollResponse, error)
	// find payroll of an employee
	FindEmployeePayroll(ctx context.Context, in *FindEmployeePayrollRequest, opts ...grpc.CallOption) (*FindEmployeePayrollResponse, error)
}

type payrollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayrollServiceClient(cc grpc.ClientConnInterface) PayrollServiceClient {
	return &payrollServiceClient{cc}
}

func (c *payrollServiceClient) AddPayroll(ctx context.Context, in *AddPayrollRequest, opts ...grpc.CallOption) (*PayrollResponse, error) {
	out := new(PayrollResponse)
	err := c.cc.Invoke(ctx, "/PayrollService/AddPayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollServiceClient) UpdatePayroll(ctx context.Context, in *UpdatePayrollRequest, opts ...grpc.CallOption) (*PayrollResponse, error) {
	out := new(PayrollResponse)
	err := c.cc.Invoke(ctx, "/PayrollService/UpdatePayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollServiceClient) FindEmployeePayroll(ctx context.Context, in *FindEmployeePayrollRequest, opts ...grpc.CallOption) (*FindEmployeePayrollResponse, error) {
	out := new(FindEmployeePayrollResponse)
	err := c.cc.Invoke(ctx, "/PayrollService/FindEmployeePayroll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayrollServiceServer is the server API for PayrollService service.
// All implementations must embed UnimplementedPayrollServiceServer
// for forward compatibility
type PayrollServiceServer interface {
	// add payroll to and existing employee
	AddPayroll(context.Context, *AddPayrollRequest) (*PayrollResponse, error)
	// update payroll of an existing employee
	UpdatePayroll(context.Context, *UpdatePayrollRequest) (*PayrollResponse, error)
	// find payroll of an employee
	FindEmployeePayroll(context.Context, *FindEmployeePayrollRequest) (*FindEmployeePayrollResponse, error)
	mustEmbedUnimplementedPayrollServiceServer()
}

// UnimplementedPayrollServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayrollServiceServer struct {
}

func (UnimplementedPayrollServiceServer) AddPayroll(context.Context, *AddPayrollRequest) (*PayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPayroll not implemented")
}
func (UnimplementedPayrollServiceServer) UpdatePayroll(context.Context, *UpdatePayrollRequest) (*PayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayroll not implemented")
}
func (UnimplementedPayrollServiceServer) FindEmployeePayroll(context.Context, *FindEmployeePayrollRequest) (*FindEmployeePayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindEmployeePayroll not implemented")
}
func (UnimplementedPayrollServiceServer) mustEmbedUnimplementedPayrollServiceServer() {}

// UnsafePayrollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayrollServiceServer will
// result in compilation errors.
type UnsafePayrollServiceServer interface {
	mustEmbedUnimplementedPayrollServiceServer()
}

func RegisterPayrollServiceServer(s grpc.ServiceRegistrar, srv PayrollServiceServer) {
	s.RegisterService(&PayrollService_ServiceDesc, srv)
}

func _PayrollService_AddPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrollServiceServer).AddPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PayrollService/AddPayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrollServiceServer).AddPayroll(ctx, req.(*AddPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayrollService_UpdatePayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrollServiceServer).UpdatePayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PayrollService/UpdatePayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrollServiceServer).UpdatePayroll(ctx, req.(*UpdatePayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayrollService_FindEmployeePayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindEmployeePayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrollServiceServer).FindEmployeePayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PayrollService/FindEmployeePayroll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrollServiceServer).FindEmployeePayroll(ctx, req.(*FindEmployeePayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayrollService_ServiceDesc is the grpc.ServiceDesc for PayrollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayrollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PayrollService",
	HandlerType: (*PayrollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPayroll",
			Handler:    _PayrollService_AddPayroll_Handler,
		},
		{
			MethodName: "UpdatePayroll",
			Handler:    _PayrollService_UpdatePayroll_Handler,
		},
		{
			MethodName: "FindEmployeePayroll",
			Handler:    _PayrollService_FindEmployeePayroll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payroll_service.proto",
}
